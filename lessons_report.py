import time
import requests
import logging
from logging.handlers import QueueHandler
from queue import Queue
from environs import Env
from telegram import Bot

logging.basicConfig(
	level=logging.INFO,
	format='%(asctime)s - %(levelname)s - %(message)s'
)

log_queue = Queue()
queue_handler = QueueHandler(log_queue)


class TelegramLogHandler(logging.Handler):
	def __init__(self, bot_token, chat_id):
		super().__init__()
		self.bot = Bot(token=bot_token)
		self.chat_id = chat_id

	def emit(self, record):
		log_entry = self.format(record)
		self.bot.send_message(chat_id=self.chat_id, text=log_entry)


def get_reviews(dvmn_api_url, headers, params, request_timeout):
	response = requests.get(dvmn_api_url, headers=headers, params=params, timeout=request_timeout)
	response.raise_for_status()
	return response.json()


def create_message(attempt):
	lesson_title = attempt["lesson_title"]
	lesson_url = attempt.get("lesson_url", "–ù–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —É—Ä–æ–∫")
	is_negative = attempt["is_negative"]

	attempt_result = {
		True: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è. –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å!",
		False: "–†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞! –û—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!",
	}

	message = (
		f"üßë‚Äç –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏–ª —Ä–∞–±–æ—Ç—É: \nüíª {lesson_title}\n"
		f"üìå –°—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫: {lesson_url}\n"
		f"{'‚ùå ' + attempt_result[is_negative] if is_negative else '‚úÖ ' + attempt_result[is_negative]}"
	)
	return message


def main():
	env = Env()
	env.read_env()

	request_timeout = env.int("REQUEST_TIMEOUT")
	dvmn_api_url = "https://dvmn.org/api/long_polling/"
	dvmn_api_token = env("DVMN_API_TOKEN")
	tg_bot_api = env("TG_BOT_API")
	tg_chat_id = env("TG_CHAT_ID")

	telegram_handler = TelegramLogHandler(tg_bot_api, tg_chat_id)
	logging.getLogger().addHandler(telegram_handler)

	bot = Bot(token=tg_bot_api)
	bot.send_message(chat_id=tg_chat_id, text="ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
	logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–∂–∏–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç DVMN.")

	headers = {"Authorization": f"Token {dvmn_api_token}"}
	params = {}

	while True:
		try:
			list_of_works_data = get_reviews(dvmn_api_url, headers, params, request_timeout)

			if list_of_works_data.get("status") == "found":
				lesson_attempt = list_of_works_data["new_attempts"][0]
				message = create_message(lesson_attempt)

				bot.send_message(chat_id=tg_chat_id, text=message)
				logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")

				params["timestamp"] = list_of_works_data.get("last_attempt_timestamp")

		except requests.exceptions.ReadTimeout:
			logging.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–¥–æ–ª–∂–∞—é –æ–∂–∏–¥–∞–Ω–∏–µ...")
			continue

		except requests.exceptions.ConnectionError:
			bot.send_message(
				chat_id=tg_chat_id, text="‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –û–∂–∏–¥–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
			)
			logging.error("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º. –û–∂–∏–¥–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
			time.sleep(10)

		except requests.exceptions.RequestException as e:
			bot.send_message(chat_id=tg_chat_id, text=f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
			logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
			time.sleep(10)


if __name__ == "__main__":
	main()
